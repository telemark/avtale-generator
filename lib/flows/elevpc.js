const logger = require('../logger')
const prepareData = require('../steps/prepare-data')
const lookupDsf = require('../steps/lookup-dsf')
const lookupP360 = require('../steps/lookup-p360')
const getElevmappe = require('../steps/get-elevmappe')
const checkRestrictedAddress = require('../steps/check-restricted-address')
const setupParts = require('../steps/setup-parts')
const prepareDocument = require('../steps/prepare-document')
const setupAgreement = require('../steps/setup-agreement')
const setupRestricted = require('../steps/setup-restricted')
const saveToDone = require('../steps/save-to-done')
const saveToArchive = require('../steps/save-to-archive')
const saveToDistribution = require('../steps/save-to-distribution')
const saveToErrors = require('../steps/save-to-errors')
const removeFromQueue = require('../steps/remove-from-queue')

module.exports = data => {
  logger('info', ['flows', 'elevpc'])
  return new Promise(async (resolve, reject) => {
    prepareData(data)
      .then(prepareDocument)
      .then(lookupDsf)
      .then(lookupP360)
      .then(getElevmappe)
      .then(checkRestrictedAddress)
      .then(setupParts)
      .then(setupAgreement)
      .then(setupRestricted)
      .then(saveToDone)
      .then(saveToArchive)
      .then(saveToDistribution)
      .then(saveToErrors)
      .then(removeFromQueue)
      .then(data => resolve(data))
      .catch(error => reject(error))
  })
}
